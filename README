# Makes a local development webserver accessible from the internet

- Supports TLS connections.
- Supports multiple client connections at the same time. This is useful even to expose a single website because browsers create multiple connections.

## How it works
- The proxy-server is deployed in the cloud. See files `proxy-server/Dockerfile` and `proxy-server/scrips/deploy.sh`.
- The proxy-server listens on two ports. Port 4000 accepts connections from the proxy-client and port 443 accepts connections from clients (the browser) and  forwards raw TCP traffic to the connected proxy-client.
- The proxy-client is started on the development computer. It connects to the proxy-server and forwards all traffic to a local webserver.

## How TLS with a custom domain name works
- Assuming you own a domain name and a TLS certificate for the domain name. Configure a DNA A record with the IP of the proxy-server. Then configure the TLS certificate in your local webserver. Configuring TLS with asp.net is just 2 config lines. See https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-7.0#specify-the-custom-certificate-via-configuration. That is all.

## Usage
- Build the proxy-server image and deploy it to the cloud: `cd proxy-server/scripts && ./build.sh && ./deploy.sh`. You may need to adjust the `build.sh` and `deploy.sh` files.
- Configure the proxy-server and local webserver addresses in the proxy-client.
- Run the proxy-client: `cd proxy-client && dotnet run`

Author: David Neuy